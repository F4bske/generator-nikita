# nikita.kickstarter

This is our toolbelt how to start a new project from scratch. It is generated by [generator-nikita](https://github.com/nikita-kit/generator-nikita) powered by [yeoman](http://yeoman.io/).

Latest Release: [![GitHub version](https://badge.fury.io/gh/nikita-kit%2Fnikita-kickstarter.png)](https://github.com/nikita-kit/nikita-kickstarter/releases)

If you're interested in HTML patterns, code snippets and best practices, try [nikita.html](https://github.com/nikita-kit/nikita-html).  
If you want to write efficient and scalable (S)CSS-code for big websites, try [nikita.css](https://github.com/nikita-kit/nikita-css).
If you want to know more about our Javascript Coding-Standard, try [nikita.js](https://github.com/nikita-kit/nikita-js).


## Requirements

- [__Node.js & NPM__](http://nodejs.org)
- [__Grunt CLI__](http://gruntjs.com/getting-started) – `sudo npm install -g grunt-cli`


## Project-Setup

- [__Grunt__](http://gruntjs.com/) – Javascript task runner
- [__Webpack__](https://webpack.js.org/) – module bundler
- [__Babel__](https://babeljs.io/) – compiler for ES6 Javascript<% if (config.get('staticPageGenerator').indexOf('assemble') != -1) { %>
- [__Assemble__](http://assemble.io/) – static site generator<% } %><% if (config.get('staticPageGenerator').indexOf('twigRender') != -1) { %>
- [__twigRender__](https://github.com/stefanullinger/grunt-twig-render) – static site generator<% } %>
- [__SASS__](http://sass-lang.com/) with [__LibSass__](http://libsass.org/) – css preprocessing
- [__Jest__](https://facebook.github.io/jest/) – JS testing framework
- [__ESLint__](http://eslint.org/) – linter for JS files
- [__stylelint__](https://stylelint.io/) – linter for SCSS files
- [__Browsersync__](https://browsersync.io/) – synchronised browser testing<% if (config.get('features').indexOf('cssStyleGuide') != -1) { %>
- [__KSS__](http://warpspire.com/kss/) – living styleguide<% } %>
- [__nikita.html__](https://github.com/nikita-kit/nikita-html) – HTML conventions and coding guidelines
- [__nikita.css__](https://github.com/nikita-kit/nikita-css) – (S)CSS conventions and coding guidelines
- [__nikita.js__](https://github.com/nikita-kit/nikita-js) – JS conventions and coding guidelines


## Getting started

1. run `npm install`
2. run `grunt` or `grunt build` – start build script
3. open [http://localhost:3000/](http://localhost:3000/) – watch your build-directory in the browser
4. run `grunt dist` – start distribution build script

If you want to specify a different port, you can start the script with the `--port` option:
`grunt --port=9000` will launch the Browsersync webserver on [http://0.0.0.0:9000/](http://0.0.0.0:9000/) and will start the Browsersync UI on port 9001 (= 9000 + 1).
If a port is already in use, BrowserSync will auto detect that case and increases the port number until a free port is found.

If you want to generate the dist to a different folder, you may use the `--target` option:
`grunt dist --target=www` will generate to `www` folder instead of `dist`.


## Project structure

The kickstart-setup provides the three main folders `source/`, `build/` and `dist/` plus a `tmp/`-folder.
All source-files will be put to the `source`-folder like templates, fonts, images, js- and sass-files.
These files will be processed by several grunt tasks – e.g. grunt-sass: sass -> css – and then stored in the `build`-folder.
From there you can view the generated html-files in the browser.
The `dist`-folder is built up like the `build`-folder.
The main difference between `build/` and `dist/` is, that `dist/` has combined and minified css/js files and no unnecessary files or code-comments.
The `build`-folder is for debugging your files, the `dist-`folder should be used for production.

```
├── build
│   ├── css
│   ├── fonts
│   ├── img
│   └── js
├── dist
│   ├── css
│   ├── fonts
│   ├── img
│   └── js
├── grunt
│   ├── config
│   ├── tasks
├── source<% if (config.get('staticPageGenerator').indexOf('assemble') != -1) { %>
│   ├── assemble
│   │   ├── data
│   │   ├── helpers
│   │   ├── layouts
│   │   ├── pages
│   │   └── partials<% } %><% if (config.get('staticPageGenerator').indexOf('twigRender') != -1) { %>
│   ├── html
│   │   ├── data
│   │   ├── macros
│   │   ├── layouts
│   │   ├── pages
│   │   └── partials<% } %><% if (config.get('features').indexOf('webfonts') !== -1) { %>
│   ├── fonts<% } %>
│   ├── img
│   │   ├── appicons
│   │   ├── bgs
│   │   ├── dev
│   │   └── temp
│   ├── js
│   ├── sass
│   │   ├── blocks
│   │   ├── extends
│   │   ├── mixins
│   │   └── variables<% if (config.get('features').indexOf('cssStyleGuide') != -1) { %>
│   ├── styleguide-template<% } %>
│   └── tests
└── tmp
```


## Use `source+build+dist` or one custom folder

It's possible to decide whether you want to use the default structure:

```
source
dist
build
```

or if you want to use a custom folder (e.g. for symfony2):

```
src/AppBundle/Resources/public
```

To decide between those, you will be asked:

``` console
? Do you want to use "build/source and dist" folder? No
? Which source folder do you want to use? (src/AppBundle/Resources/public)
```

You can choose `Y` to keep the default logic (using source-folder to generate dist+build folder depending on the grunt
task you choose).


## HTML

For the HTML structure, please have a look at [nikita.html](https://github.com/nikita-kit/nikita-html). This sub project
describes the HTML coding standards and conventions.


## CSS

For the CSS structure, please have a look at [nikita.css](https://github.com/nikita-kit/nikita-css). This sub project
describes the CSS coding standards and conventions.


## Javascript

For the JS structure, please have a look at [nikita.js](https://github.com/nikita-kit/nikita-js). This sub project
describes the JS coding standards and conventions.

The master layout at `html/layouts/master.twig` includes the Javascript at the end of the file (before the closing `</body>` tag).

The `js/main.js` file is generated by webpack. This file contains everything, which is `require`d or `import`ed in your JS-Code.
Run `grunt analyze-js` to see bundled content of `js/main.js` as convenient interactive zoomable treemap.

### Libraries included

<% if (config.get('addons').indexOf('jQuery') != -1 || config.get('addons').indexOf('selectTwo') != -1) { %>
- [jquery](http://jquery.com/)<% } %>
- [jsb](https://github.com/DracoBlue/jsb)
- [logging.js](https://github.com/DracoBlue/logging-js)<% if (config.get('addons').indexOf('selectTwo') != -1) { %>
- [select2](https://github.com/select2/select2)<% } %><% if (config.get('addons').indexOf('slider') != -1) { %>
- [swiper](https://github.com/nolimits4web/Swiper)<% } %>


## Tests

You'd like to test your Javascript code? The kickstarter comes with Jest testing framework!
Just add your tests at `tests/`-folder with `.test.js`-suffix and run `grunt test`. To launch Jest in watch mode, just run `grunt test --watch`.
If you're interested in code coverage, run `grunt test-coverage`.


## Code linting

The kickstarter comes with tasks for linting your JS, HTML and SASS code.
Just run `check-html`, `check-css` or  `check-js`.
In addition, the SASS and the JS code linting will be executed as a pre commit hook.
This ensures a basic code style in nikita projects.
Run `grunt fix-scss` or `grunt fix-js` to call the linter with the `--fix` option.
This will fix most of the common problems like indention, brace style and style property order automatically.


## Images

All images from `img`-folder will be copied during build.
Only exception is the `img/dev`-folder. Here you can put all your Photoshop-PSDs, Fireworks-PNGs or Illustrator-AIs.
If you wont to minify your source images in the `img`-folder using imagemin, just run `grunt minify-images` and commit them.
Imagemin is very expensive, so this step is not part from build task to save time.

<% if (config.get('features').indexOf('svgBackgrounds') != -1) { %>

### SVG images as Data-URIs

To include svg icons as background-images, just put your SVG-icons into `source/img/bgs`.
All icons will be processed with the svgmin-task and included as data-URIs in a scss placeholder file.
As a result, you can include your svg icons by using the `_svg-background.scss` mixin. Just type `@include svg-background(name-of-your-icon);`.
<% } %>

<% if (config.get('features').indexOf('webfonts') !== -1) { %>

## Fonts

Put all your webfonts into `fonts`-folder and add the style definitions to `sass/_webfonts.scss`-file.
<% } %>


## Questions?

If you're asking yourself »Why not …?« have a look at my [WHYNOT.md](https://github.com/nikita-kit/nikita-kickstarter/blob/master/WHY-NOT.md) file. There we might answer some common questions. :)


## Contributing

Please make contributions on the [generator-nikita project](https://github.com/nikita-kit/generator-nikita#Contributing).


## License

nikita.kickstarter is licensed under [CC0](http://creativecommons.org/publicdomain/zero/1.0/): Public Domain Dedication, please see
[NIKITA-LICENSE.md](https://github.com/nikita-kit/nikita-kickstarter/blob/master/NIKITA-LICENSE.md) for further information.
