# nikita.kickstarter - <%= config.get('template') %>

This is our toolbelt how to start a new project from scratch. It is generated by [generator-nikita](https://github.com/nikita-kit/generator-nikita) powered by [yeoman](http://yeoman.io/).
Feel free to re-run the generator to change the nikita features with `yo nikita`.

If you're interested in HTML patterns, code snippets and best practices, try [nikita.html](https://github.com/nikita-kit/nikita-html).
If you want to write efficient and scalable (S)CSS-code for big websites, try [nikita.css](https://github.com/nikita-kit/nikita-css).
If you want to know more about our Javascript Coding-Standard, try [nikita.js](https://github.com/nikita-kit/nikita-js).


## Requirements

- [__Node.js__](http://nodejs.org) >= 6
- [__Grunt CLI__](http://gruntjs.com/getting-started)(optional) – install with `sudo npm install -g grunt-cli` or use `npm run grunt`


## Project-Setup

- [__Grunt__](http://gruntjs.com/) – Javascript task runner
- [__Webpack__](https://webpack.js.org/) – module bundler
- [__Babel__](https://babeljs.io/) – compiler for ES6 Javascript
<% if (config.get('jsFramework') === 'react') { -%>
- [__React__](https://reactjs.org/) – JS library for building user interfaces
<% } -%>
- [__twigRender__](https://github.com/stefanullinger/grunt-twig-render) – static site generator
<% if (config.get('jsFramework') === 'jsb') { -%>
- [__EJS__](http://ejs.co/) - client side templates
<% } -%>
- [__SCSS__](http://sass-lang.com/) with [__LibSass__](http://libsass.org/) – css preprocessing
- [__PostCSS__](http://postcss.org/) – css postprocessing
- [__Jest__](https://facebook.github.io/jest/) – JS testing framework
- [__ESLint__](http://eslint.org/) – linter for JS files
- [__stylelint__](https://stylelint.io/) – linter for SCSS files
- [__Browsersync__](https://browsersync.io/) – synchronised browser testing
- [__nikita.html__](https://github.com/nikita-kit/nikita-html) – HTML conventions and coding guidelines
- [__nikita.css__](https://github.com/nikita-kit/nikita-css) – (S)CSS conventions and coding guidelines
- [__nikita.js__](https://github.com/nikita-kit/nikita-js) – JS conventions and coding guidelines


## Getting started

1. run `npm install` - install dependencies
2. run `grunt` – start dev build script
3. open [http://localhost:3000/](http://localhost:3000/) – watch your build-directory in the browser
* run `grunt dist` – start distribution build script

If you want to specify a different port, you can start the script with the `--port` option:
`grunt --port=9000` will launch the Browsersync webserver on [http://0.0.0.0:9000/](http://0.0.0.0:9000/) and will start the Browsersync UI on port 9001 (= 9000 + 1).
If a port is already in use, BrowserSync will auto detect that case and increases the port number until a free port is found.


## Project structure

The nikita-setup provides the three main folders `<%= config.get('rootFolder') %>src/`, `<%= config.get('rootFolder') %>static/` and `grunt/`.
All source-files will be put to the `<%= config.get('rootFolder') %>src`-folder like html templates, js- and scss-files.
These files will be processed by several grunt tasks and then stored in the `<%= config.get('rootFolder') %>static/generated/`-folder.
Depending whether you called `grunt` or `grunt dist`, these files are minified or not.

Besides these generated files, several other static files like images will be put into the `<%= config.get('rootFolder') %>static/`-folder.

In the `grunt`-folder you find the task configurations and custom grunt tasks.
Have a look at `grunt/aliases.js` to see all available task group definitions and aliases.

```
├── grunt
│   ├── config
│   ├── tasks
├── <%= config.get('rootFolder') %>src
│   ├── components
│   ├── html
│   │   ├── data
│   │   ├── macros
│   │   ├── layouts
│   │   ├── pages
│   │   └── partials
│   ├── js
│   ├── scss
│   │   ├── bg-icons
│   │   ├── blocks
│   │   ├── extends
│   │   ├── mixins
│   │   └── variables
│   └── tests
│       └── setup
├── <%= config.get('rootFolder') %>static
<% if (config.get('features').includes('webfonts')) { -%>
│   ├── fonts
<% } -%>
│   ├── generated
│   └── img
│       ├── appicons
│       └── temp
└── tmp
```


## HTML

For the HTML structure, please have a look at [nikita.html](https://github.com/nikita-kit/nikita-html). This sub project
describes the HTML coding standards and conventions.
See also the README file in the `src/html`-folder.


## CSS

For the CSS structure, please have a look at [nikita.css](https://github.com/nikita-kit/nikita-css). This sub project
describes the CSS coding standards and conventions.

The master layout at `src/html/layouts/master.twig` includes the main stylesheet `styles.css`.


## Javascript

For the JS structure, please have a look at [nikita.js](https://github.com/nikita-kit/nikita-js). This sub project
describes the JS coding standards and conventions.

The master layout at `src/html/layouts/master.twig` includes the Javascript at the end of the file (before the closing `</body>` tag).

The `generated/main.js` file is generated by webpack. This file contains everything, which is `require`d or `import`ed in your JS-Code.
Run `grunt analyze-js` to see bundled content of `generated/main.js` as convenient interactive zoomable treemap.

<% if (config.get('jsFramework') === 'jsb') { -%>
Within the Javascript modules it's also possible the import client side templates with EJS syntax.
<% } -%>

### Libraries included

<% if (config.get('jsFramework') === 'react') { -%>
- [react](https://reactjs.org/)
- [react-router](https://reacttraining.com/react-router/web/)
- [react-waterfall](https://github.com/didierfranc/react-waterfall)
- [prop-types](https://github.com/facebook/prop-types)
- [classnames](https://github.com/JedWatson/classnames)
- [logging.js](https://github.com/DracoBlue/logging-js)
<% } else { -%>
<%     if (config.get('addons').includes('jQuery') || config.get('addons').includes('selectTwo')) { -%>
- [jquery](http://jquery.com/)
<%     } -%>
- [jsb](https://github.com/DracoBlue/jsb)
- [logging.js](https://github.com/DracoBlue/logging-js)
<%     if (config.get('addons').includes('selectTwo')) { -%>
- [select2](https://github.com/select2/select2)
<%     } %>
<%     if (config.get('addons').includes('slider')) { -%>
- [swiper](https://github.com/nolimits4web/Swiper)
<%     } -%>
<% } %>

## Components

if you have small, independent and reusable modules, this is the right place for it.
Just store your component files in a subfolder of the `src/components`-folder and all files will be processed by the grunt tasks.
This way you have all related files at one single place. Supported are Javascript Files, EJS templates, SCSS partials, twig partials and test files.


## Tests

You'd like to test your Javascript code? The kickstarter comes with Jest testing framework<% if (config.get('jsFramework') === 'react') { %> and Enzyme<% } %>!
Just add your tests at `src/tests`-folder with `.test.js`-suffix and run `grunt test`. To launch Jest in watch mode, just run `grunt test --watch`.
If you're interested in code coverage, run `grunt test-coverage`.


## Code linting

The kickstarter comes with tasks for linting your JS, HTML and SCSS code.
Just run `check-html`, `check-css` or  `check-js`.<% if (config.get('features').includes('preCommitHook')) { %>
In addition, the SCSS and the JS code linting will be executed as a pre-commit hook.<% } %>
This ensures a basic code style in nikita projects.
Run `grunt fix-scss` or `grunt fix-js` to call the linter with the `--fix` option.
This will fix most of the common problems like indention, brace style and style property order automatically.


## Images

Put all your images-files into `static/img`-folder.
If you wont to minify your source images in the `static/img`-folder using imagemin, just run `grunt minify-images` and commit them.
Imagemin is very expensive, so this step is not part of build task to save time.


<% if (config.get('features').includes('svgBackgrounds')) { -%>
### SVG images as Data-URIs

To include svg icons as background-images, just put your SVG-icons into `src/scss/bg-icons`-folder.
All icons will be processed with the svgmin-task and included as data-URIs in a scss placeholder file.
As a result, you can include your svg icons by using the `_svg-background.scss` mixin. Just type `@include svg-background(name-of-your-icon);`.
<% } -%>

<% if (config.get('features').includes('webfonts')) { -%>
## Fonts

Put all your webfonts into `static/fonts`-folder and add the style definitions to `src/scss/_webfonts.scss`-file.
<% } -%>


## Questions?

If you're asking yourself »Why not …?« have a look at my [WHYNOT.md](https://github.com/nikita-kit/nikita-kickstarter/blob/master/WHY-NOT.md) file. There we might answer some common questions. :)


## Contributing

Please make contributions on the [generator-nikita project](https://github.com/nikita-kit/generator-nikita#Contributing).


## License

nikita.kickstarter is licensed under [CC0](http://creativecommons.org/publicdomain/zero/1.0/): Public Domain Dedication, please see
[NIKITA-LICENSE.md](https://github.com/nikita-kit/nikita-kickstarter/blob/master/NIKITA-LICENSE.md) for further information.
