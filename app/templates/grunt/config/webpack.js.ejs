module.exports = function (grunt, options) {
    return (function () {

        const path = require('path');
        const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
        const DotenvPlugin = require('dotenv-webpack');
<% if (config.get('jsFramework') === 'jsb') { -%>
        const webpack = require('webpack');
        const plugins = [
            new webpack.IgnorePlugin(/^(.*)$/, /node-jsb$/),
            new DotenvPlugin(),
        ];
<% } else { -%>
        const plugins = [new DotenvPlugin()];
<% } -%>

        /*
         * remember to update jest transformer when changing loader options
         * @see tests/setup/
         */
        const getLoaderRulesConfig = (targets, debug = false) => ([
<% if (config.get('jsFramework') === 'jsb') { -%>
            {
                test: /\.ejs$/,
                loader: 'ejs-webpack-loader',
                options: {
                    client: true,
                    _with: false,
                    localsName: 'data',
                    compileDebug: debug,
                    htmlmin: true,
                    htmlminOptions: {
                        removeComments: true,
                    },
                },
            },
            {
                test: /\.js$/,
                enforce: 'pre',
                loader: 'import-glob',
                include: [path.resolve('<%%= paths.src %>')],
            },
<% } -%>
            {
                test: /\.js$/,
                loader: 'babel-loader',
                include: [path.resolve('<%%= paths.src %>')],
                options: {
                    compact: true,
                    cacheDirectory: true,
                    cacheCompression: false,
                    plugins: [
                        [
                            '@babel/plugin-transform-runtime', {
                                regenerator: false,
                                useESModules: true,
                            },
                        ],
                        ['@babel/plugin-proposal-class-properties', { loose: true }],
                    ],
                    presets: [
                        [
                            '@babel/preset-env', {
                                modules: false,
                                loose: true,
                                useBuiltIns: 'usage',
                                targets,
                                debug,
                            },
                        ],
<% if (config.get('jsFramework') === 'react') { -%>
                        '@babel/preset-react',
<% } -%>
                    ],
                },
            },
        ]);

        return {
            options: {
                cache: true,
                entry: {
                    main: './<%%= paths.src %>/js/_main.js',
                },
                output: {
                    filename: '[name].js',
                    chunkFilename: '[name].js',
                    path: path.resolve('<%%= paths.static %>/generated/'),
                },
                plugins,
                resolve: {
                    mainFields: ['browser', 'main', 'module'],
                    symlinks: false,
                },
                performance: {
                    maxEntrypointSize: 500000,
                    maxAssetSize: 500000,
                },
            },
            analyze: {
                mode: 'production',
                watch: true,
                stats: {
                    maxModules: 99999,
                },
                optimization: {
                    concatenateModules: false,
                },
                output: {
                    path: path.resolve('<%%= paths.tmp %>/js/'),
                },
                module: {
                    rules: getLoaderRulesConfig({ esmodules: true }, true),
                },
                plugins: [new BundleAnalyzerPlugin()],
            },
            dev: {
                mode: 'development',
                module: {
                    rules: getLoaderRulesConfig({ browsers: options.browserslist }),
                },
            },
<% if (config.get('features').includes('modernJsBuild')) { -%>
            devModern: {
                mode: 'development',
                devtool: 'source-map',
                module: {
                    rules: getLoaderRulesConfig({ esmodules: true }),
                },
                output: {
                    filename: '[name].modern.js',
                    chunkFilename: '[name].modern.js',
                },
            },
<% } -%>
            dist: {
                mode: 'production',
                module: {
                    rules: getLoaderRulesConfig({ browsers: options.browserslist }),
                },
            },
<% if (config.get('features').includes('modernJsBuild')) { -%>
            distModern: {
                mode: 'production',
                module: {
                    rules: getLoaderRulesConfig({ esmodules: true }),
                },
                output: {
                    filename: '[name].modern.js',
                    chunkFilename: '[name].modern.js',
                },
            },
<% } -%>
        };
    }());
};
