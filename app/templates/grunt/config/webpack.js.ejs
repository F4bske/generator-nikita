module.exports = function (grunt, options) {
    return (function () {

        const path = require('path');
        const webpack = require('webpack');
        const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
        const plugins = [
<% if (config.get('jsFramework') === 'jsb') { -%>
            new webpack.IgnorePlugin(/^(.*)$/, /node-jsb$/),
<% } -%>
            new webpack.optimize.ModuleConcatenationPlugin(),
        ];

        return {
            options: {
                cache: true,
                entry: {
                    main: './<%%= paths.src %>/js/_main.js',
                },
                output: {
                    filename: '[name].js',
                },
                module: {
<% if (config.get('jsFramework') === 'jsb') { -%>
                    exprContextCritical: false,
<% } -%>
                    rules: [
                        {
                            test: /\.js$/,
                            enforce: 'pre',
                            loader: 'import-glob',
                            exclude: /node_modules/
                        },
                        {
                            test: /\.scss$/,
                            enforce: 'pre',
                            loader: 'import-glob'
                        },
                        {
                            test: /\.js$/,
                            loader: 'babel-loader',
                            include: [
                                path.resolve('<%%= paths.src %>'),
                            ],
                            options: {
                                compact: true,
                                cacheDirectory: true,
                                plugins: ['transform-runtime'],
                                presets: [['env', {
                                    modules: false,
                                    loose: true,
                                    targets: {
                                        browsers: options.browserslist,
                                    },
                                }], <% if (config.get('jsFramework') === 'react') { %>'react', <% } %>'stage-1']
                            }
                        },
                        {
                            test: /\.ejs$/,
                            loader: 'ejs-compiled-loader',
                            options: {
                                'htmlmin': true,
                                'htmlminOptions': {
                                    removeComments: true,
                                },
                            }
                        },
                        {
                            test: /\.scss$/,
                            use: ['style-loader', 'css-loader', 'sass-loader']
                        },
                    ],
                },
                resolve: {
                    mainFields: ['browser', 'main', 'module'],
                    symlinks: false,
                },
            },
            analyze: {
                watch: true,
                stats: {
                    maxModules: 99999,
                },
                output: {
                    path: path.resolve('<%%= paths.tmp %>/js/'),
                },
                plugins: plugins.concat([new BundleAnalyzerPlugin()]),
            },
            dev: {
                devtool: 'sourcemap',
                output: {
                    path: path.resolve('<%%= paths.static %>/generated/'),
                },
                plugins: plugins.concat([
                    new webpack.DefinePlugin({
                        'process.env.NODE_ENV': '"development"',
                    }),
                ]),
            },
            dist: {
                output: {
                    path: path.resolve('<%%= paths.static %>/generated/'),
                },
                plugins: plugins.concat([
                    new webpack.DefinePlugin({
                        'process.env.NODE_ENV': '"production"',
                    }),
                ]),
            }
        };
    })()
};
