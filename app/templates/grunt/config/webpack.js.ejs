module.exports = function (grunt, options) {
    return (function () {

        const path = require('path');
        const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
<% if (config.get('jsFramework') === 'jsb') { -%>
        const webpack = require('webpack');
        const plugins = [
            new webpack.IgnorePlugin(/^(.*)$/, /node-jsb$/),
        ];
<% } -%>

        return {
            options: {
                cache: true,
                entry: {
                    main: './<%%= paths.src %>/js/_main.js',
                },
                output: {
                    filename: '[name].js',
                    chunkFilename: '[name].js',
                },
                module: {
<% if (config.get('jsFramework') === 'jsb') { -%>
                    exprContextCritical: false,
<% } -%>
                    rules: [
<% if (config.get('jsFramework') === 'jsb') { -%>
                        {
                            test: /\.js$/,
                            enforce: 'pre',
                            loader: 'import-glob',
                            exclude: /node_modules/,
                        },
<% } -%>
                        {
                            test: /\.js$/,
                            loader: 'babel-loader',
                            include: [
                                path.resolve('<%%= paths.src %>'),
                            ],
                            options: {
                                compact: true,
                                cacheDirectory: true,
                                plugins: [
                                    ['@babel/plugin-transform-runtime', {
                                        regenerator: false,
                                        useESModules: true,
                                    }],
                                    ['@babel/plugin-proposal-class-properties', { loose: true }],
                                ],
                                presets: [
                                    ['@babel/preset-env', {
                                        modules: false,
                                        loose: true,
                                        useBuiltIns: 'usage',
                                        targets: {
                                            browsers: options.browserslist,
                                        },
                                    }],
<% if (config.get('jsFramework') === 'react') { -%>
                                    '@babel/preset-react',
<% } -%>
                                ],
                            },
                        },
<% if (config.get('jsFramework') === 'jsb') { -%>
                        {
                            test: /\.ejs$/,
                            loader: 'ejs-webpack-loader',
                            options: {
                                'htmlmin': true,
                                'htmlminOptions': {
                                    removeComments: true,
                                },
                            },
                        },
<% } -%>
                        {
                            test: /\.scss$/,
                            use: ['style-loader', 'css-loader', 'sass-loader'],
                        },
                    ],
                },
                resolve: {
                    mainFields: ['browser', 'main', 'module'],
                    symlinks: false,
                },
            },
            analyze: {
                mode: 'production',
                watch: true,
                stats: {
                    maxModules: 99999,
                },
                optimization: {
                    concatenateModules: false,
                },
                output: {
                    path: path.resolve('<%%= paths.tmp %>/js/'),
                },
                plugins: [new BundleAnalyzerPlugin()],
            },
            dev: {
                mode: 'development',
                devtool: 'source-map',
                output: {
                    path: path.resolve('<%%= paths.static %>/generated/'),
                },
<% if (config.get('jsFramework') === 'jsb') { -%>
                plugins: plugins,
<% } -%>
            },
            dist: {
                mode: 'production',
                performance: {
                    maxEntrypointSize: 500000,
                    maxAssetSize: 500000,
                },
                output: {
                    path: path.resolve('<%%= paths.static %>/generated/'),
                },
<% if (config.get('jsFramework') === 'jsb') { -%>
                plugins: plugins,
<% } -%>
            },
        };
    })();
};
